	# 对流水线心跳进行单独的处理
	location = /process/api/build/builds/heartbeat {
  		error_page  500 = @buildend_json_handler;

		auth_request /auth/build;
		
		# 设置auth的变量
		include auth.request.set.build.conf;

		set $access_type 'build';
		set $service "process";
		set $target '';
		
		access_by_lua_file 'conf/lua/router_srv.lua';
		
		# 设置proxy header的变量
		include proxy.set.header.build.conf;

		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$target/api/build/builds/heartbeat?$args;
	}

	# 对流水线心跳进行单独的处理
	location = /ms/process/api/build/builds/heartbeat {
  		error_page  500 = @buildend_json_handler;

		auth_request /auth/build;
		
		# 设置auth的变量
		include auth.request.set.build.conf;

		set $access_type 'build';
		set $service "process";
		set $target '';
		
		access_by_lua_file 'conf/lua/router_srv.lua';
		
		# 设置proxy header的变量
		include proxy.set.header.build.conf;
		
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$target/api/build/builds/heartbeat?$args;
	}

	# 外部回调分发(codesvn|codegit|gitlab WEBHOOK)
	location ~ /external/scm/(codesvn|codegit|gitlab)/commit {
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		set $access_type 'build';
		set $service 'process';
		set $provider $1;
		set $target '';
		access_by_lua_file 'conf/lua/router_srv.lua';
		proxy_pass http://$target/api/external/scm/$provider/commit?$args;
	}
	# 外部code的webhook
	location ~ /external/code/hook/(commit|oauth) {
		set $access_type 'build';
		set $service 'code';
		set $provider $1;
		set $target '';
		access_by_lua_file 'conf/lua/router_srv.lua';
		
		# 设置proxy header的变量
		include proxy.set.header.common.conf;

		proxy_pass http://$target/api/external/code/hook/$provider?$args;
	}
	# 第三方构建机安装脚本
    location ~ /external/agents/(\w+)/(install|uninstall|agent|jre|upgrader|script_upgrader) {
    	set $access_type 'build';
    	set $service 'environment';
    	set $agentId $1;
    	set $target '';
    	access_by_lua_file 'conf/lua/router_srv.lua';
		
		# 设置proxy header的变量
		include proxy.set.header.common.conf;

    	proxy_pass http://$target/api/external/thirdPartyAgent/$agentId/$2?$args;
    }

	# 外部回调分发(安全加固回调)
	location ~ /external/(security|wetest)/callback {
		set $access_type 'build';
		set $service 'process';
		set $target '';
		access_by_lua_file 'conf/lua/router_srv.lua';
		
		# 设置proxy header的变量
		include proxy.set.header.common.conf;

		proxy_pass http://$target/api/external/$1/callback?$args;
	}

	# config模块的配置
	location ~ /(config)/(.*) {
		auth_request /auth/service;
		set $access_type '';
		set $service $1;
		set $path $2;
		set $target '';
		access_by_lua_file 'conf/lua/router_srv.lua';
		add_header Cache-Control no-store;
		
		
		# 设置proxy header的变量
		include proxy.set.header.common.conf;

		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$target/$path?$args;
	}