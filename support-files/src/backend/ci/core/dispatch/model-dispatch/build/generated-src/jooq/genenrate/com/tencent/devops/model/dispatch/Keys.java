/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.dispatch;


import com.tencent.devops.model.dispatch.tables.TDispatchDevcloudBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchDevcloudContainerConfig;
import com.tencent.devops.model.dispatch.tables.TDispatchMachine;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerDebug;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerEnable;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerHost;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerHostZone;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerTask;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineDockerTemplate;
import com.tencent.devops.model.dispatch.tables.TDispatchPipelineVm;
import com.tencent.devops.model.dispatch.tables.TDispatchPrivateVm;
import com.tencent.devops.model.dispatch.tables.TDispatchProjectSnapshot;
import com.tencent.devops.model.dispatch.tables.TDispatchTask;
import com.tencent.devops.model.dispatch.tables.TDispatchTaskDetail;
import com.tencent.devops.model.dispatch.tables.TDispatchTaskVm;
import com.tencent.devops.model.dispatch.tables.TDispatchThirdpartyAgentBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchThirdpartyBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackBuild;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackConfig;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackFloatingIp;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackSystem;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackVm;
import com.tencent.devops.model.dispatch.tables.TDispatchTstackVolume;
import com.tencent.devops.model.dispatch.tables.TDispatchVm;
import com.tencent.devops.model.dispatch.tables.TDispatchVmType;
import com.tencent.devops.model.dispatch.tables.records.TDispatchDevcloudBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchDevcloudContainerConfigRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchMachineRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerDebugRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerEnableRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerHostRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerHostZoneRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerTaskRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerTemplateRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineVmRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPrivateVmRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchProjectSnapshotRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTaskDetailRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTaskRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTaskVmRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchThirdpartyAgentBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchThirdpartyBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackBuildRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackConfigRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackFloatingIpRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackSystemRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackVmRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchTstackVolumeRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchVmRecord;
import com.tencent.devops.model.dispatch.tables.records.TDispatchVmTypeRecord;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>devops_dispatch</code> 
 * schema
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<TDispatchDevcloudBuildRecord, Long> IDENTITY_T_DISPATCH_DEVCLOUD_BUILD = Identities0.IDENTITY_T_DISPATCH_DEVCLOUD_BUILD;
    public static final Identity<TDispatchDevcloudContainerConfigRecord, Long> IDENTITY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG = Identities0.IDENTITY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG;
    public static final Identity<TDispatchMachineRecord, Integer> IDENTITY_T_DISPATCH_MACHINE = Identities0.IDENTITY_T_DISPATCH_MACHINE;
    public static final Identity<TDispatchPipelineBuildRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_BUILD = Identities0.IDENTITY_T_DISPATCH_PIPELINE_BUILD;
    public static final Identity<TDispatchPipelineDockerBuildRecord, Long> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_BUILD = Identities0.IDENTITY_T_DISPATCH_PIPELINE_DOCKER_BUILD;
    public static final Identity<TDispatchPipelineDockerDebugRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_DEBUG = Identities0.IDENTITY_T_DISPATCH_PIPELINE_DOCKER_DEBUG;
    public static final Identity<TDispatchPipelineDockerTaskRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TASK = Identities0.IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TASK;
    public static final Identity<TDispatchPipelineDockerTemplateRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE = Identities0.IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE;
    public static final Identity<TDispatchTaskRecord, Integer> IDENTITY_T_DISPATCH_TASK = Identities0.IDENTITY_T_DISPATCH_TASK;
    public static final Identity<TDispatchTaskDetailRecord, Integer> IDENTITY_T_DISPATCH_TASK_DETAIL = Identities0.IDENTITY_T_DISPATCH_TASK_DETAIL;
    public static final Identity<TDispatchTaskVmRecord, Integer> IDENTITY_T_DISPATCH_TASK_VM = Identities0.IDENTITY_T_DISPATCH_TASK_VM;
    public static final Identity<TDispatchThirdpartyAgentBuildRecord, Integer> IDENTITY_T_DISPATCH_THIRDPARTY_AGENT_BUILD = Identities0.IDENTITY_T_DISPATCH_THIRDPARTY_AGENT_BUILD;
    public static final Identity<TDispatchThirdpartyBuildRecord, Long> IDENTITY_T_DISPATCH_THIRDPARTY_BUILD = Identities0.IDENTITY_T_DISPATCH_THIRDPARTY_BUILD;
    public static final Identity<TDispatchTstackBuildRecord, Long> IDENTITY_T_DISPATCH_TSTACK_BUILD = Identities0.IDENTITY_T_DISPATCH_TSTACK_BUILD;
    public static final Identity<TDispatchTstackVmRecord, Long> IDENTITY_T_DISPATCH_TSTACK_VM = Identities0.IDENTITY_T_DISPATCH_TSTACK_VM;
    public static final Identity<TDispatchVmRecord, Integer> IDENTITY_T_DISPATCH_VM = Identities0.IDENTITY_T_DISPATCH_VM;
    public static final Identity<TDispatchVmTypeRecord, Integer> IDENTITY_T_DISPATCH_VM_TYPE = Identities0.IDENTITY_T_DISPATCH_VM_TYPE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_DEVCLOUD_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_BUILD_ID = UniqueKeys0.KEY_T_DISPATCH_DEVCLOUD_BUILD_BUILD_ID;
    public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_PIPELINE_VMSEQ_ID = UniqueKeys0.KEY_T_DISPATCH_DEVCLOUD_BUILD_PIPELINE_VMSEQ_ID;
    public static final UniqueKey<TDispatchDevcloudContainerConfigRecord> KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PRIMARY;
    public static final UniqueKey<TDispatchDevcloudContainerConfigRecord> KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PROJECT_ID = UniqueKeys0.KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PROJECT_ID;
    public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_MACHINE_PRIMARY;
    public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_MACHINE_IP = UniqueKeys0.KEY_T_DISPATCH_MACHINE_MACHINE_IP;
    public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_MACHINE_NAME = UniqueKeys0.KEY_T_DISPATCH_MACHINE_MACHINE_NAME;
    public static final UniqueKey<TDispatchPipelineBuildRecord> KEY_T_DISPATCH_PIPELINE_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerBuildRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerBuildRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_BUILD_ID = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_BUILD_ID;
    public static final UniqueKey<TDispatchPipelineDockerDebugRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerDebugRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PIPELINE_ID = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PIPELINE_ID;
    public static final UniqueKey<TDispatchPipelineDockerEnableRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_ENABLE_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_ENABLE_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerHostRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerHostZoneRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerTaskRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_PRIMARY;
    public static final UniqueKey<TDispatchPipelineDockerTaskRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_BUILD_ID = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_BUILD_ID;
    public static final UniqueKey<TDispatchPipelineDockerTemplateRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE_PRIMARY;
    public static final UniqueKey<TDispatchPipelineVmRecord> KEY_T_DISPATCH_PIPELINE_VM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PIPELINE_VM_PRIMARY;
    public static final UniqueKey<TDispatchPrivateVmRecord> KEY_T_DISPATCH_PRIVATE_VM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PRIVATE_VM_PRIMARY;
    public static final UniqueKey<TDispatchPrivateVmRecord> KEY_T_DISPATCH_PRIVATE_VM_VM_PROJECT_ID = UniqueKeys0.KEY_T_DISPATCH_PRIVATE_VM_VM_PROJECT_ID;
    public static final UniqueKey<TDispatchProjectSnapshotRecord> KEY_T_DISPATCH_PROJECT_SNAPSHOT_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_PROJECT_SNAPSHOT_PRIMARY;
    public static final UniqueKey<TDispatchProjectSnapshotRecord> KEY_T_DISPATCH_PROJECT_SNAPSHOT_U_PROJECT_SNAPSHOT = UniqueKeys0.KEY_T_DISPATCH_PROJECT_SNAPSHOT_U_PROJECT_SNAPSHOT;
    public static final UniqueKey<TDispatchTaskRecord> KEY_T_DISPATCH_TASK_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TASK_PRIMARY;
    public static final UniqueKey<TDispatchTaskDetailRecord> KEY_T_DISPATCH_TASK_DETAIL_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TASK_DETAIL_PRIMARY;
    public static final UniqueKey<TDispatchTaskVmRecord> KEY_T_DISPATCH_TASK_VM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TASK_VM_PRIMARY;
    public static final UniqueKey<TDispatchThirdpartyAgentBuildRecord> KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchThirdpartyAgentBuildRecord> KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_BUILD_ID = UniqueKeys0.KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_BUILD_ID;
    public static final UniqueKey<TDispatchThirdpartyBuildRecord> KEY_T_DISPATCH_THIRDPARTY_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_THIRDPARTY_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchTstackBuildRecord> KEY_T_DISPATCH_TSTACK_BUILD_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_BUILD_PRIMARY;
    public static final UniqueKey<TDispatchTstackConfigRecord> KEY_T_DISPATCH_TSTACK_CONFIG_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_CONFIG_PRIMARY;
    public static final UniqueKey<TDispatchTstackFloatingIpRecord> KEY_T_DISPATCH_TSTACK_FLOATING_IP_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_FLOATING_IP_PRIMARY;
    public static final UniqueKey<TDispatchTstackSystemRecord> KEY_T_DISPATCH_TSTACK_SYSTEM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_SYSTEM_PRIMARY;
    public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_VM_PRIMARY;
    public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_TSTACK_VM_ID = UniqueKeys0.KEY_T_DISPATCH_TSTACK_VM_TSTACK_VM_ID;
    public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_VM_IP = UniqueKeys0.KEY_T_DISPATCH_TSTACK_VM_VM_IP;
    public static final UniqueKey<TDispatchTstackVolumeRecord> KEY_T_DISPATCH_TSTACK_VOLUME_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_TSTACK_VOLUME_PRIMARY;
    public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_VM_PRIMARY;
    public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_VM_IP = UniqueKeys0.KEY_T_DISPATCH_VM_VM_IP;
    public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_VM_NAME = UniqueKeys0.KEY_T_DISPATCH_VM_VM_NAME;
    public static final UniqueKey<TDispatchVmTypeRecord> KEY_T_DISPATCH_VM_TYPE_PRIMARY = UniqueKeys0.KEY_T_DISPATCH_VM_TYPE_PRIMARY;
    public static final UniqueKey<TDispatchVmTypeRecord> KEY_T_DISPATCH_VM_TYPE_TYPE_NAME = UniqueKeys0.KEY_T_DISPATCH_VM_TYPE_TYPE_NAME;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<TDispatchDevcloudBuildRecord, Long> IDENTITY_T_DISPATCH_DEVCLOUD_BUILD = createIdentity(TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD, TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD.ID);
        public static Identity<TDispatchDevcloudContainerConfigRecord, Long> IDENTITY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG = createIdentity(TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG, TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG.ID);
        public static Identity<TDispatchMachineRecord, Integer> IDENTITY_T_DISPATCH_MACHINE = createIdentity(TDispatchMachine.T_DISPATCH_MACHINE, TDispatchMachine.T_DISPATCH_MACHINE.MACHINE_ID);
        public static Identity<TDispatchPipelineBuildRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_BUILD = createIdentity(TDispatchPipelineBuild.T_DISPATCH_PIPELINE_BUILD, TDispatchPipelineBuild.T_DISPATCH_PIPELINE_BUILD.ID);
        public static Identity<TDispatchPipelineDockerBuildRecord, Long> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_BUILD = createIdentity(TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD, TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD.ID);
        public static Identity<TDispatchPipelineDockerDebugRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_DEBUG = createIdentity(TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG, TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG.ID);
        public static Identity<TDispatchPipelineDockerTaskRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TASK = createIdentity(TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK, TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK.ID);
        public static Identity<TDispatchPipelineDockerTemplateRecord, Integer> IDENTITY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE = createIdentity(TDispatchPipelineDockerTemplate.T_DISPATCH_PIPELINE_DOCKER_TEMPLATE, TDispatchPipelineDockerTemplate.T_DISPATCH_PIPELINE_DOCKER_TEMPLATE.ID);
        public static Identity<TDispatchTaskRecord, Integer> IDENTITY_T_DISPATCH_TASK = createIdentity(TDispatchTask.T_DISPATCH_TASK, TDispatchTask.T_DISPATCH_TASK.TASK_ID);
        public static Identity<TDispatchTaskDetailRecord, Integer> IDENTITY_T_DISPATCH_TASK_DETAIL = createIdentity(TDispatchTaskDetail.T_DISPATCH_TASK_DETAIL, TDispatchTaskDetail.T_DISPATCH_TASK_DETAIL.ID);
        public static Identity<TDispatchTaskVmRecord, Integer> IDENTITY_T_DISPATCH_TASK_VM = createIdentity(TDispatchTaskVm.T_DISPATCH_TASK_VM, TDispatchTaskVm.T_DISPATCH_TASK_VM.ID);
        public static Identity<TDispatchThirdpartyAgentBuildRecord, Integer> IDENTITY_T_DISPATCH_THIRDPARTY_AGENT_BUILD = createIdentity(TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD, TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD.ID);
        public static Identity<TDispatchThirdpartyBuildRecord, Long> IDENTITY_T_DISPATCH_THIRDPARTY_BUILD = createIdentity(TDispatchThirdpartyBuild.T_DISPATCH_THIRDPARTY_BUILD, TDispatchThirdpartyBuild.T_DISPATCH_THIRDPARTY_BUILD.ID);
        public static Identity<TDispatchTstackBuildRecord, Long> IDENTITY_T_DISPATCH_TSTACK_BUILD = createIdentity(TDispatchTstackBuild.T_DISPATCH_TSTACK_BUILD, TDispatchTstackBuild.T_DISPATCH_TSTACK_BUILD.ID);
        public static Identity<TDispatchTstackVmRecord, Long> IDENTITY_T_DISPATCH_TSTACK_VM = createIdentity(TDispatchTstackVm.T_DISPATCH_TSTACK_VM, TDispatchTstackVm.T_DISPATCH_TSTACK_VM.ID);
        public static Identity<TDispatchVmRecord, Integer> IDENTITY_T_DISPATCH_VM = createIdentity(TDispatchVm.T_DISPATCH_VM, TDispatchVm.T_DISPATCH_VM.VM_ID);
        public static Identity<TDispatchVmTypeRecord, Integer> IDENTITY_T_DISPATCH_VM_TYPE = createIdentity(TDispatchVmType.T_DISPATCH_VM_TYPE, TDispatchVmType.T_DISPATCH_VM_TYPE.TYPE_ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_PRIMARY = createUniqueKey(TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD, "KEY_T_DISPATCH_DEVCLOUD_BUILD_PRIMARY", TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD.ID);
        public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_BUILD_ID = createUniqueKey(TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD, "KEY_T_DISPATCH_DEVCLOUD_BUILD_BUILD_ID", TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD.BUILD_ID);
        public static final UniqueKey<TDispatchDevcloudBuildRecord> KEY_T_DISPATCH_DEVCLOUD_BUILD_PIPELINE_VMSEQ_ID = createUniqueKey(TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD, "KEY_T_DISPATCH_DEVCLOUD_BUILD_PIPELINE_VMSEQ_ID", TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD.PIPELINE_ID, TDispatchDevcloudBuild.T_DISPATCH_DEVCLOUD_BUILD.VM_SEQ_ID);
        public static final UniqueKey<TDispatchDevcloudContainerConfigRecord> KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PRIMARY = createUniqueKey(TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG, "KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PRIMARY", TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG.ID);
        public static final UniqueKey<TDispatchDevcloudContainerConfigRecord> KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PROJECT_ID = createUniqueKey(TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG, "KEY_T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG_PROJECT_ID", TDispatchDevcloudContainerConfig.T_DISPATCH_DEVCLOUD_CONTAINER_CONFIG.PROJECT_ID);
        public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_PRIMARY = createUniqueKey(TDispatchMachine.T_DISPATCH_MACHINE, "KEY_T_DISPATCH_MACHINE_PRIMARY", TDispatchMachine.T_DISPATCH_MACHINE.MACHINE_ID);
        public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_MACHINE_IP = createUniqueKey(TDispatchMachine.T_DISPATCH_MACHINE, "KEY_T_DISPATCH_MACHINE_MACHINE_IP", TDispatchMachine.T_DISPATCH_MACHINE.MACHINE_IP);
        public static final UniqueKey<TDispatchMachineRecord> KEY_T_DISPATCH_MACHINE_MACHINE_NAME = createUniqueKey(TDispatchMachine.T_DISPATCH_MACHINE, "KEY_T_DISPATCH_MACHINE_MACHINE_NAME", TDispatchMachine.T_DISPATCH_MACHINE.MACHINE_NAME);
        public static final UniqueKey<TDispatchPipelineBuildRecord> KEY_T_DISPATCH_PIPELINE_BUILD_PRIMARY = createUniqueKey(TDispatchPipelineBuild.T_DISPATCH_PIPELINE_BUILD, "KEY_T_DISPATCH_PIPELINE_BUILD_PRIMARY", TDispatchPipelineBuild.T_DISPATCH_PIPELINE_BUILD.ID);
        public static final UniqueKey<TDispatchPipelineDockerBuildRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_PRIMARY = createUniqueKey(TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD, "KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_PRIMARY", TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD.ID);
        public static final UniqueKey<TDispatchPipelineDockerBuildRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_BUILD_ID = createUniqueKey(TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD, "KEY_T_DISPATCH_PIPELINE_DOCKER_BUILD_BUILD_ID", TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD.BUILD_ID, TDispatchPipelineDockerBuild.T_DISPATCH_PIPELINE_DOCKER_BUILD.VM_SEQ_ID);
        public static final UniqueKey<TDispatchPipelineDockerDebugRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY = createUniqueKey(TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG, "KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY", TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG.ID);
        public static final UniqueKey<TDispatchPipelineDockerDebugRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PIPELINE_ID = createUniqueKey(TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG, "KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PIPELINE_ID", TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG.PIPELINE_ID, TDispatchPipelineDockerDebug.T_DISPATCH_PIPELINE_DOCKER_DEBUG.VM_SEQ_ID);
        public static final UniqueKey<TDispatchPipelineDockerEnableRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_ENABLE_PRIMARY = createUniqueKey(TDispatchPipelineDockerEnable.T_DISPATCH_PIPELINE_DOCKER_ENABLE, "KEY_T_DISPATCH_PIPELINE_DOCKER_ENABLE_PRIMARY", TDispatchPipelineDockerEnable.T_DISPATCH_PIPELINE_DOCKER_ENABLE.PIPELINE_ID, TDispatchPipelineDockerEnable.T_DISPATCH_PIPELINE_DOCKER_ENABLE.VM_SEQ_ID);
        public static final UniqueKey<TDispatchPipelineDockerHostRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_PRIMARY = createUniqueKey(TDispatchPipelineDockerHost.T_DISPATCH_PIPELINE_DOCKER_HOST, "KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_PRIMARY", TDispatchPipelineDockerHost.T_DISPATCH_PIPELINE_DOCKER_HOST.PROJECT_CODE, TDispatchPipelineDockerHost.T_DISPATCH_PIPELINE_DOCKER_HOST.HOST_IP);
        public static final UniqueKey<TDispatchPipelineDockerHostZoneRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE_PRIMARY = createUniqueKey(TDispatchPipelineDockerHostZone.T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE, "KEY_T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE_PRIMARY", TDispatchPipelineDockerHostZone.T_DISPATCH_PIPELINE_DOCKER_HOST_ZONE.HOST_IP);
        public static final UniqueKey<TDispatchPipelineDockerTaskRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_PRIMARY = createUniqueKey(TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK, "KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_PRIMARY", TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK.ID);
        public static final UniqueKey<TDispatchPipelineDockerTaskRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_BUILD_ID = createUniqueKey(TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK, "KEY_T_DISPATCH_PIPELINE_DOCKER_TASK_BUILD_ID", TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK.BUILD_ID, TDispatchPipelineDockerTask.T_DISPATCH_PIPELINE_DOCKER_TASK.VM_SEQ_ID);
        public static final UniqueKey<TDispatchPipelineDockerTemplateRecord> KEY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE_PRIMARY = createUniqueKey(TDispatchPipelineDockerTemplate.T_DISPATCH_PIPELINE_DOCKER_TEMPLATE, "KEY_T_DISPATCH_PIPELINE_DOCKER_TEMPLATE_PRIMARY", TDispatchPipelineDockerTemplate.T_DISPATCH_PIPELINE_DOCKER_TEMPLATE.ID);
        public static final UniqueKey<TDispatchPipelineVmRecord> KEY_T_DISPATCH_PIPELINE_VM_PRIMARY = createUniqueKey(TDispatchPipelineVm.T_DISPATCH_PIPELINE_VM, "KEY_T_DISPATCH_PIPELINE_VM_PRIMARY", TDispatchPipelineVm.T_DISPATCH_PIPELINE_VM.PIPELINE_ID, TDispatchPipelineVm.T_DISPATCH_PIPELINE_VM.VM_SEQ_ID);
        public static final UniqueKey<TDispatchPrivateVmRecord> KEY_T_DISPATCH_PRIVATE_VM_PRIMARY = createUniqueKey(TDispatchPrivateVm.T_DISPATCH_PRIVATE_VM, "KEY_T_DISPATCH_PRIVATE_VM_PRIMARY", TDispatchPrivateVm.T_DISPATCH_PRIVATE_VM.VM_ID);
        public static final UniqueKey<TDispatchPrivateVmRecord> KEY_T_DISPATCH_PRIVATE_VM_VM_PROJECT_ID = createUniqueKey(TDispatchPrivateVm.T_DISPATCH_PRIVATE_VM, "KEY_T_DISPATCH_PRIVATE_VM_VM_PROJECT_ID", TDispatchPrivateVm.T_DISPATCH_PRIVATE_VM.VM_ID, TDispatchPrivateVm.T_DISPATCH_PRIVATE_VM.PROJECT_ID);
        public static final UniqueKey<TDispatchProjectSnapshotRecord> KEY_T_DISPATCH_PROJECT_SNAPSHOT_PRIMARY = createUniqueKey(TDispatchProjectSnapshot.T_DISPATCH_PROJECT_SNAPSHOT, "KEY_T_DISPATCH_PROJECT_SNAPSHOT_PRIMARY", TDispatchProjectSnapshot.T_DISPATCH_PROJECT_SNAPSHOT.PROJECT_ID);
        public static final UniqueKey<TDispatchProjectSnapshotRecord> KEY_T_DISPATCH_PROJECT_SNAPSHOT_U_PROJECT_SNAPSHOT = createUniqueKey(TDispatchProjectSnapshot.T_DISPATCH_PROJECT_SNAPSHOT, "KEY_T_DISPATCH_PROJECT_SNAPSHOT_U_PROJECT_SNAPSHOT", TDispatchProjectSnapshot.T_DISPATCH_PROJECT_SNAPSHOT.PROJECT_ID, TDispatchProjectSnapshot.T_DISPATCH_PROJECT_SNAPSHOT.VM_STARTUP_SNAPSHOT);
        public static final UniqueKey<TDispatchTaskRecord> KEY_T_DISPATCH_TASK_PRIMARY = createUniqueKey(TDispatchTask.T_DISPATCH_TASK, "KEY_T_DISPATCH_TASK_PRIMARY", TDispatchTask.T_DISPATCH_TASK.TASK_ID);
        public static final UniqueKey<TDispatchTaskDetailRecord> KEY_T_DISPATCH_TASK_DETAIL_PRIMARY = createUniqueKey(TDispatchTaskDetail.T_DISPATCH_TASK_DETAIL, "KEY_T_DISPATCH_TASK_DETAIL_PRIMARY", TDispatchTaskDetail.T_DISPATCH_TASK_DETAIL.ID);
        public static final UniqueKey<TDispatchTaskVmRecord> KEY_T_DISPATCH_TASK_VM_PRIMARY = createUniqueKey(TDispatchTaskVm.T_DISPATCH_TASK_VM, "KEY_T_DISPATCH_TASK_VM_PRIMARY", TDispatchTaskVm.T_DISPATCH_TASK_VM.ID);
        public static final UniqueKey<TDispatchThirdpartyAgentBuildRecord> KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_PRIMARY = createUniqueKey(TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD, "KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_PRIMARY", TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD.ID);
        public static final UniqueKey<TDispatchThirdpartyAgentBuildRecord> KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_BUILD_ID = createUniqueKey(TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD, "KEY_T_DISPATCH_THIRDPARTY_AGENT_BUILD_BUILD_ID", TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD.BUILD_ID, TDispatchThirdpartyAgentBuild.T_DISPATCH_THIRDPARTY_AGENT_BUILD.VM_SEQ_ID);
        public static final UniqueKey<TDispatchThirdpartyBuildRecord> KEY_T_DISPATCH_THIRDPARTY_BUILD_PRIMARY = createUniqueKey(TDispatchThirdpartyBuild.T_DISPATCH_THIRDPARTY_BUILD, "KEY_T_DISPATCH_THIRDPARTY_BUILD_PRIMARY", TDispatchThirdpartyBuild.T_DISPATCH_THIRDPARTY_BUILD.ID);
        public static final UniqueKey<TDispatchTstackBuildRecord> KEY_T_DISPATCH_TSTACK_BUILD_PRIMARY = createUniqueKey(TDispatchTstackBuild.T_DISPATCH_TSTACK_BUILD, "KEY_T_DISPATCH_TSTACK_BUILD_PRIMARY", TDispatchTstackBuild.T_DISPATCH_TSTACK_BUILD.ID);
        public static final UniqueKey<TDispatchTstackConfigRecord> KEY_T_DISPATCH_TSTACK_CONFIG_PRIMARY = createUniqueKey(TDispatchTstackConfig.T_DISPATCH_TSTACK_CONFIG, "KEY_T_DISPATCH_TSTACK_CONFIG_PRIMARY", TDispatchTstackConfig.T_DISPATCH_TSTACK_CONFIG.PROJECT_ID);
        public static final UniqueKey<TDispatchTstackFloatingIpRecord> KEY_T_DISPATCH_TSTACK_FLOATING_IP_PRIMARY = createUniqueKey(TDispatchTstackFloatingIp.T_DISPATCH_TSTACK_FLOATING_IP, "KEY_T_DISPATCH_TSTACK_FLOATING_IP_PRIMARY", TDispatchTstackFloatingIp.T_DISPATCH_TSTACK_FLOATING_IP.FLOATING_IP);
        public static final UniqueKey<TDispatchTstackSystemRecord> KEY_T_DISPATCH_TSTACK_SYSTEM_PRIMARY = createUniqueKey(TDispatchTstackSystem.T_DISPATCH_TSTACK_SYSTEM, "KEY_T_DISPATCH_TSTACK_SYSTEM_PRIMARY", TDispatchTstackSystem.T_DISPATCH_TSTACK_SYSTEM.ID);
        public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_PRIMARY = createUniqueKey(TDispatchTstackVm.T_DISPATCH_TSTACK_VM, "KEY_T_DISPATCH_TSTACK_VM_PRIMARY", TDispatchTstackVm.T_DISPATCH_TSTACK_VM.ID);
        public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_TSTACK_VM_ID = createUniqueKey(TDispatchTstackVm.T_DISPATCH_TSTACK_VM, "KEY_T_DISPATCH_TSTACK_VM_TSTACK_VM_ID", TDispatchTstackVm.T_DISPATCH_TSTACK_VM.TSTACK_VM_ID);
        public static final UniqueKey<TDispatchTstackVmRecord> KEY_T_DISPATCH_TSTACK_VM_VM_IP = createUniqueKey(TDispatchTstackVm.T_DISPATCH_TSTACK_VM, "KEY_T_DISPATCH_TSTACK_VM_VM_IP", TDispatchTstackVm.T_DISPATCH_TSTACK_VM.VM_IP);
        public static final UniqueKey<TDispatchTstackVolumeRecord> KEY_T_DISPATCH_TSTACK_VOLUME_PRIMARY = createUniqueKey(TDispatchTstackVolume.T_DISPATCH_TSTACK_VOLUME, "KEY_T_DISPATCH_TSTACK_VOLUME_PRIMARY", TDispatchTstackVolume.T_DISPATCH_TSTACK_VOLUME.VOLUME_ID, TDispatchTstackVolume.T_DISPATCH_TSTACK_VOLUME.PIPELINE_ID, TDispatchTstackVolume.T_DISPATCH_TSTACK_VOLUME.VM_SEQ_ID);
        public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_PRIMARY = createUniqueKey(TDispatchVm.T_DISPATCH_VM, "KEY_T_DISPATCH_VM_PRIMARY", TDispatchVm.T_DISPATCH_VM.VM_ID);
        public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_VM_IP = createUniqueKey(TDispatchVm.T_DISPATCH_VM, "KEY_T_DISPATCH_VM_VM_IP", TDispatchVm.T_DISPATCH_VM.VM_IP);
        public static final UniqueKey<TDispatchVmRecord> KEY_T_DISPATCH_VM_VM_NAME = createUniqueKey(TDispatchVm.T_DISPATCH_VM, "KEY_T_DISPATCH_VM_VM_NAME", TDispatchVm.T_DISPATCH_VM.VM_NAME);
        public static final UniqueKey<TDispatchVmTypeRecord> KEY_T_DISPATCH_VM_TYPE_PRIMARY = createUniqueKey(TDispatchVmType.T_DISPATCH_VM_TYPE, "KEY_T_DISPATCH_VM_TYPE_PRIMARY", TDispatchVmType.T_DISPATCH_VM_TYPE.TYPE_ID);
        public static final UniqueKey<TDispatchVmTypeRecord> KEY_T_DISPATCH_VM_TYPE_TYPE_NAME = createUniqueKey(TDispatchVmType.T_DISPATCH_VM_TYPE, "KEY_T_DISPATCH_VM_TYPE_TYPE_NAME", TDispatchVmType.T_DISPATCH_VM_TYPE.TYPE_NAME);
    }
}
