/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.dispatch.tables;


import com.tencent.devops.model.dispatch.DevopsDispatch;
import com.tencent.devops.model.dispatch.Keys;
import com.tencent.devops.model.dispatch.tables.records.TDispatchPipelineDockerDebugRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDispatchPipelineDockerDebug extends TableImpl<TDispatchPipelineDockerDebugRecord> {

    private static final long serialVersionUID = 166072554;

    /**
     * The reference instance of <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG</code>
     */
    public static final TDispatchPipelineDockerDebug T_DISPATCH_PIPELINE_DOCKER_DEBUG = new TDispatchPipelineDockerDebug();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TDispatchPipelineDockerDebugRecord> getRecordType() {
        return TDispatchPipelineDockerDebugRecord.class;
    }

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.ID</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.PROJECT_ID</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.PIPELINE_ID</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> PIPELINE_ID = createField("PIPELINE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.VM_SEQ_ID</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> VM_SEQ_ID = createField("VM_SEQ_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.STATUS</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, Integer> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.TOKEN</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> TOKEN = createField("TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.IMAGE_NAME</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> IMAGE_NAME = createField("IMAGE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(1024).nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.HOST_TAG</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> HOST_TAG = createField("HOST_TAG", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.CONTAINER_ID</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> CONTAINER_ID = createField("CONTAINER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.CREATED_TIME</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, LocalDateTime> CREATED_TIME = createField("CREATED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.UPDATED_TIME</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, LocalDateTime> UPDATED_TIME = createField("UPDATED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.ZONE</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> ZONE = createField("ZONE", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.BUILD_ENV</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> BUILD_ENV = createField("BUILD_ENV", org.jooq.impl.SQLDataType.VARCHAR.length(4096), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.REGISTRY_USER</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> REGISTRY_USER = createField("REGISTRY_USER", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.REGISTRY_PWD</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> REGISTRY_PWD = createField("REGISTRY_PWD", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG.IMAGE_TYPE</code>.
     */
    public final TableField<TDispatchPipelineDockerDebugRecord, String> IMAGE_TYPE = createField("IMAGE_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * Create a <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG</code> table reference
     */
    public TDispatchPipelineDockerDebug() {
        this("T_DISPATCH_PIPELINE_DOCKER_DEBUG", null);
    }

    /**
     * Create an aliased <code>devops_dispatch.T_DISPATCH_PIPELINE_DOCKER_DEBUG</code> table reference
     */
    public TDispatchPipelineDockerDebug(String alias) {
        this(alias, T_DISPATCH_PIPELINE_DOCKER_DEBUG);
    }

    private TDispatchPipelineDockerDebug(String alias, Table<TDispatchPipelineDockerDebugRecord> aliased) {
        this(alias, aliased, null);
    }

    private TDispatchPipelineDockerDebug(String alias, Table<TDispatchPipelineDockerDebugRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsDispatch.DEVOPS_DISPATCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TDispatchPipelineDockerDebugRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_DISPATCH_PIPELINE_DOCKER_DEBUG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TDispatchPipelineDockerDebugRecord> getPrimaryKey() {
        return Keys.KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TDispatchPipelineDockerDebugRecord>> getKeys() {
        return Arrays.<UniqueKey<TDispatchPipelineDockerDebugRecord>>asList(Keys.KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PRIMARY, Keys.KEY_T_DISPATCH_PIPELINE_DOCKER_DEBUG_PIPELINE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TDispatchPipelineDockerDebug as(String alias) {
        return new TDispatchPipelineDockerDebug(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TDispatchPipelineDockerDebug rename(String name) {
        return new TDispatchPipelineDockerDebug(name, null);
    }
}
