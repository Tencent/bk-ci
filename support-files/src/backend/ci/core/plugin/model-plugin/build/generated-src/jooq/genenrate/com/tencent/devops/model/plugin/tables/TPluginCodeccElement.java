/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.plugin.tables;


import com.tencent.devops.model.plugin.DevopsPlugin;
import com.tencent.devops.model.plugin.Keys;
import com.tencent.devops.model.plugin.tables.records.TPluginCodeccElementRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TPluginCodeccElement extends TableImpl<TPluginCodeccElementRecord> {

    private static final long serialVersionUID = -723143046;

    /**
     * The reference instance of <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT</code>
     */
    public static final TPluginCodeccElement T_PLUGIN_CODECC_ELEMENT = new TPluginCodeccElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TPluginCodeccElementRecord> getRecordType() {
        return TPluginCodeccElementRecord.class;
    }

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.ID</code>.
     */
    public final TableField<TPluginCodeccElementRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.PROJECT_ID</code>. 项目id
     */
    public final TableField<TPluginCodeccElementRecord, String> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "项目id");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.PIPELINE_ID</code>. 流水线id
     */
    public final TableField<TPluginCodeccElementRecord, String> PIPELINE_ID = createField("PIPELINE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(34), this, "流水线id");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.TASK_NAME</code>. 任务名称
     */
    public final TableField<TPluginCodeccElementRecord, String> TASK_NAME = createField("TASK_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "任务名称");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.TASK_CN_NAME</code>. 任务中文名称
     */
    public final TableField<TPluginCodeccElementRecord, String> TASK_CN_NAME = createField("TASK_CN_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "任务中文名称");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.TASK_ID</code>. 任务id
     */
    public final TableField<TPluginCodeccElementRecord, String> TASK_ID = createField("TASK_ID", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "任务id");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.IS_SYNC</code>. 是否是同步
     */
    public final TableField<TPluginCodeccElementRecord, String> IS_SYNC = createField("IS_SYNC", org.jooq.impl.SQLDataType.VARCHAR.length(6), this, "是否是同步");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.SCAN_TYPE</code>. 扫描类型（0：全量, 1：增量）
     */
    public final TableField<TPluginCodeccElementRecord, String> SCAN_TYPE = createField("SCAN_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(6), this, "扫描类型（0：全量, 1：增量）");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.LANGUAGE</code>. 工程语言
     */
    public final TableField<TPluginCodeccElementRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "工程语言");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.PLATFORM</code>. codecc原子执行环境，例如WINDOWS，LINUX，MACOS等
     */
    public final TableField<TPluginCodeccElementRecord, String> PLATFORM = createField("PLATFORM", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "codecc原子执行环境，例如WINDOWS，LINUX，MACOS等");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.TOOLS</code>. 扫描工具，eg：\"[\"COVERITY\",\"CPPLINT\",\"PYLINT\",\"TSCLUA\",\"CCN\",\"DUPC\",\"ESLINT\",\"GOML\",\"KLOCWORK\"]
     */
    public final TableField<TPluginCodeccElementRecord, String> TOOLS = createField("TOOLS", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "扫描工具，eg：\\\"[\\\"COVERITY\\\",\\\"CPPLINT\\\",\\\"PYLINT\\\",\\\"TSCLUA\\\",\\\"CCN\\\",\\\"DUPC\\\",\\\"ESLINT\\\",\\\"GOML\\\",\\\"KLOCWORK\\\"]");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.PY_VERSION</code>. 其中“py2”表示使用python2版本，“py3”表示使用python3版本
     */
    public final TableField<TPluginCodeccElementRecord, String> PY_VERSION = createField("PY_VERSION", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "其中“py2”表示使用python2版本，“py3”表示使用python3版本");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.ESLINT_RC</code>. js项目框架
     */
    public final TableField<TPluginCodeccElementRecord, String> ESLINT_RC = createField("ESLINT_RC", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "js项目框架");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.CODE_PATH</code>. 代码存放路径
     */
    public final TableField<TPluginCodeccElementRecord, String> CODE_PATH = createField("CODE_PATH", org.jooq.impl.SQLDataType.CLOB, this, "代码存放路径");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.SCRIPT_TYPE</code>. 脚本类型
     */
    public final TableField<TPluginCodeccElementRecord, String> SCRIPT_TYPE = createField("SCRIPT_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "脚本类型");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.SCRIPT</code>. 脚本内容
     */
    public final TableField<TPluginCodeccElementRecord, String> SCRIPT = createField("SCRIPT", org.jooq.impl.SQLDataType.CLOB, this, "脚本内容");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.CHANNEL_CODE</code>. 渠道号
     */
    public final TableField<TPluginCodeccElementRecord, String> CHANNEL_CODE = createField("CHANNEL_CODE", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "渠道号");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.UPDATE_USER_ID</code>. 更新的用户id
     */
    public final TableField<TPluginCodeccElementRecord, String> UPDATE_USER_ID = createField("UPDATE_USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "更新的用户id");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.IS_DELETE</code>. 1-该codecc原子已被删除，0-未删除
     */
    public final TableField<TPluginCodeccElementRecord, String> IS_DELETE = createField("IS_DELETE", org.jooq.impl.SQLDataType.VARCHAR.length(6), this, "1-该codecc原子已被删除，0-未删除");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.UPDATE_TIME</code>. 更新时间
     */
    public final TableField<TPluginCodeccElementRecord, LocalDateTime> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT.SUB_PIPELINE_ID</code>. 对应的自流水线id
     */
    public final TableField<TPluginCodeccElementRecord, String> SUB_PIPELINE_ID = createField("SUB_PIPELINE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(34), this, "对应的自流水线id");

    /**
     * Create a <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT</code> table reference
     */
    public TPluginCodeccElement() {
        this("T_PLUGIN_CODECC_ELEMENT", null);
    }

    /**
     * Create an aliased <code>devops_plugin.T_PLUGIN_CODECC_ELEMENT</code> table reference
     */
    public TPluginCodeccElement(String alias) {
        this(alias, T_PLUGIN_CODECC_ELEMENT);
    }

    private TPluginCodeccElement(String alias, Table<TPluginCodeccElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private TPluginCodeccElement(String alias, Table<TPluginCodeccElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsPlugin.DEVOPS_PLUGIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TPluginCodeccElementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_PLUGIN_CODECC_ELEMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TPluginCodeccElementRecord> getPrimaryKey() {
        return Keys.KEY_T_PLUGIN_CODECC_ELEMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TPluginCodeccElementRecord>> getKeys() {
        return Arrays.<UniqueKey<TPluginCodeccElementRecord>>asList(Keys.KEY_T_PLUGIN_CODECC_ELEMENT_PRIMARY, Keys.KEY_T_PLUGIN_CODECC_ELEMENT_PROJECT_PIPELINE_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TPluginCodeccElement as(String alias) {
        return new TPluginCodeccElement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TPluginCodeccElement rename(String name) {
        return new TPluginCodeccElement(name, null);
    }
}
