/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.repository.tables;


import com.tencent.devops.model.repository.DevopsRepository;
import com.tencent.devops.model.repository.Keys;
import com.tencent.devops.model.repository.tables.records.TRepositoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRepository extends TableImpl<TRepositoryRecord> {

    private static final long serialVersionUID = -283936936;

    /**
     * The reference instance of <code>devops_repository.T_REPOSITORY</code>
     */
    public static final TRepository T_REPOSITORY = new TRepository();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRepositoryRecord> getRecordType() {
        return TRepositoryRecord.class;
    }

    /**
     * The column <code>devops_repository.T_REPOSITORY.REPOSITORY_ID</code>.
     */
    public final TableField<TRepositoryRecord, Long> REPOSITORY_ID = createField("REPOSITORY_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.PROJECT_ID</code>.
     */
    public final TableField<TRepositoryRecord, String> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.USER_ID</code>.
     */
    public final TableField<TRepositoryRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.ALIAS_NAME</code>.
     */
    public final TableField<TRepositoryRecord, String> ALIAS_NAME = createField("ALIAS_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.URL</code>.
     */
    public final TableField<TRepositoryRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.TYPE</code>.
     */
    public final TableField<TRepositoryRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.CREATED_TIME</code>.
     */
    public final TableField<TRepositoryRecord, LocalDateTime> CREATED_TIME = createField("CREATED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.UPDATED_TIME</code>.
     */
    public final TableField<TRepositoryRecord, LocalDateTime> UPDATED_TIME = createField("UPDATED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY.IS_DELETED</code>.
     */
    public final TableField<TRepositoryRecord, Boolean> IS_DELETED = createField("IS_DELETED", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * Create a <code>devops_repository.T_REPOSITORY</code> table reference
     */
    public TRepository() {
        this("T_REPOSITORY", null);
    }

    /**
     * Create an aliased <code>devops_repository.T_REPOSITORY</code> table reference
     */
    public TRepository(String alias) {
        this(alias, T_REPOSITORY);
    }

    private TRepository(String alias, Table<TRepositoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRepository(String alias, Table<TRepositoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsRepository.DEVOPS_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRepositoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRepositoryRecord> getPrimaryKey() {
        return Keys.KEY_T_REPOSITORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRepositoryRecord>> getKeys() {
        return Arrays.<UniqueKey<TRepositoryRecord>>asList(Keys.KEY_T_REPOSITORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRepository as(String alias) {
        return new TRepository(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRepository rename(String name) {
        return new TRepository(name, null);
    }
}
