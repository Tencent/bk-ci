/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.repository.tables;


import com.tencent.devops.model.repository.DevopsRepository;
import com.tencent.devops.model.repository.Keys;
import com.tencent.devops.model.repository.tables.records.TRepositoryCommitRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRepositoryCommit extends TableImpl<TRepositoryCommitRecord> {

    private static final long serialVersionUID = 60414810;

    /**
     * The reference instance of <code>devops_repository.T_REPOSITORY_COMMIT</code>
     */
    public static final TRepositoryCommit T_REPOSITORY_COMMIT = new TRepositoryCommit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRepositoryCommitRecord> getRecordType() {
        return TRepositoryCommitRecord.class;
    }

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.ID</code>.
     */
    public final TableField<TRepositoryCommitRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.BUILD_ID</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> BUILD_ID = createField("BUILD_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.PIPELINE_ID</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> PIPELINE_ID = createField("PIPELINE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.REPO_ID</code>.
     */
    public final TableField<TRepositoryCommitRecord, Long> REPO_ID = createField("REPO_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.TYPE</code>. 1-svn, 2-git, 3-gitlab
     */
    public final TableField<TRepositoryCommitRecord, Short> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "1-svn, 2-git, 3-gitlab");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.COMMIT</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> COMMIT = createField("COMMIT", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.COMMITTER</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> COMMITTER = createField("COMMITTER", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.COMMIT_TIME</code>.
     */
    public final TableField<TRepositoryCommitRecord, LocalDateTime> COMMIT_TIME = createField("COMMIT_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.COMMENT</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.ELEMENT_ID</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> ELEMENT_ID = createField("ELEMENT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_COMMIT.REPO_NAME</code>.
     */
    public final TableField<TRepositoryCommitRecord, String> REPO_NAME = createField("REPO_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * Create a <code>devops_repository.T_REPOSITORY_COMMIT</code> table reference
     */
    public TRepositoryCommit() {
        this("T_REPOSITORY_COMMIT", null);
    }

    /**
     * Create an aliased <code>devops_repository.T_REPOSITORY_COMMIT</code> table reference
     */
    public TRepositoryCommit(String alias) {
        this(alias, T_REPOSITORY_COMMIT);
    }

    private TRepositoryCommit(String alias, Table<TRepositoryCommitRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRepositoryCommit(String alias, Table<TRepositoryCommitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsRepository.DEVOPS_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRepositoryCommitRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_REPOSITORY_COMMIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRepositoryCommitRecord> getPrimaryKey() {
        return Keys.KEY_T_REPOSITORY_COMMIT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRepositoryCommitRecord>> getKeys() {
        return Arrays.<UniqueKey<TRepositoryCommitRecord>>asList(Keys.KEY_T_REPOSITORY_COMMIT_PRIMARY, Keys.KEY_T_REPOSITORY_COMMIT_PIPELINE_REPO_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRepositoryCommit as(String alias) {
        return new TRepositoryCommit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRepositoryCommit rename(String name) {
        return new TRepositoryCommit(name, null);
    }
}
