/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.repository.tables;


import com.tencent.devops.model.repository.DevopsRepository;
import com.tencent.devops.model.repository.Keys;
import com.tencent.devops.model.repository.tables.records.TRepositoryGithubTokenRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRepositoryGithubToken extends TableImpl<TRepositoryGithubTokenRecord> {

    private static final long serialVersionUID = 1899508041;

    /**
     * The reference instance of <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN</code>
     */
    public static final TRepositoryGithubToken T_REPOSITORY_GITHUB_TOKEN = new TRepositoryGithubToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRepositoryGithubTokenRecord> getRecordType() {
        return TRepositoryGithubTokenRecord.class;
    }

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.ID</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.USER_ID</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.ACCESS_TOKEN</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, String> ACCESS_TOKEN = createField("ACCESS_TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(96).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.TOKEN_TYPE</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, String> TOKEN_TYPE = createField("TOKEN_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.SCOPE</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, String> SCOPE = createField("SCOPE", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.CREATE_TIME</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, LocalDateTime> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN.UPDATE_TIME</code>.
     */
    public final TableField<TRepositoryGithubTokenRecord, LocalDateTime> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN</code> table reference
     */
    public TRepositoryGithubToken() {
        this("T_REPOSITORY_GITHUB_TOKEN", null);
    }

    /**
     * Create an aliased <code>devops_repository.T_REPOSITORY_GITHUB_TOKEN</code> table reference
     */
    public TRepositoryGithubToken(String alias) {
        this(alias, T_REPOSITORY_GITHUB_TOKEN);
    }

    private TRepositoryGithubToken(String alias, Table<TRepositoryGithubTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRepositoryGithubToken(String alias, Table<TRepositoryGithubTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsRepository.DEVOPS_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRepositoryGithubTokenRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_REPOSITORY_GITHUB_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRepositoryGithubTokenRecord> getPrimaryKey() {
        return Keys.KEY_T_REPOSITORY_GITHUB_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRepositoryGithubTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TRepositoryGithubTokenRecord>>asList(Keys.KEY_T_REPOSITORY_GITHUB_TOKEN_PRIMARY, Keys.KEY_T_REPOSITORY_GITHUB_TOKEN_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRepositoryGithubToken as(String alias) {
        return new TRepositoryGithubToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRepositoryGithubToken rename(String name) {
        return new TRepositoryGithubToken(name, null);
    }
}
