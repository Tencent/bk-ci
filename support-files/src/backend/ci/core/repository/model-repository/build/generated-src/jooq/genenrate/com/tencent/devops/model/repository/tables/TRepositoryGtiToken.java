/*
 * This file is generated by jOOQ.
*/
package com.tencent.devops.model.repository.tables;


import com.tencent.devops.model.repository.DevopsRepository;
import com.tencent.devops.model.repository.Keys;
import com.tencent.devops.model.repository.tables.records.TRepositoryGtiTokenRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRepositoryGtiToken extends TableImpl<TRepositoryGtiTokenRecord> {

    private static final long serialVersionUID = -760414054;

    /**
     * The reference instance of <code>devops_repository.T_REPOSITORY_GTI_TOKEN</code>
     */
    public static final TRepositoryGtiToken T_REPOSITORY_GTI_TOKEN = new TRepositoryGtiToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRepositoryGtiTokenRecord> getRecordType() {
        return TRepositoryGtiTokenRecord.class;
    }

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.ID</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.USER_ID</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.ACCESS_TOKEN</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, String> ACCESS_TOKEN = createField("ACCESS_TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(96), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.REFRESH_TOKEN</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, String> REFRESH_TOKEN = createField("REFRESH_TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(96), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.TOKEN_TYPE</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, String> TOKEN_TYPE = createField("TOKEN_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>devops_repository.T_REPOSITORY_GTI_TOKEN.EXPIRES_IN</code>.
     */
    public final TableField<TRepositoryGtiTokenRecord, Long> EXPIRES_IN = createField("EXPIRES_IN", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>devops_repository.T_REPOSITORY_GTI_TOKEN</code> table reference
     */
    public TRepositoryGtiToken() {
        this("T_REPOSITORY_GTI_TOKEN", null);
    }

    /**
     * Create an aliased <code>devops_repository.T_REPOSITORY_GTI_TOKEN</code> table reference
     */
    public TRepositoryGtiToken(String alias) {
        this(alias, T_REPOSITORY_GTI_TOKEN);
    }

    private TRepositoryGtiToken(String alias, Table<TRepositoryGtiTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRepositoryGtiToken(String alias, Table<TRepositoryGtiTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevopsRepository.DEVOPS_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRepositoryGtiTokenRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_REPOSITORY_GTI_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRepositoryGtiTokenRecord> getPrimaryKey() {
        return Keys.KEY_T_REPOSITORY_GTI_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRepositoryGtiTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TRepositoryGtiTokenRecord>>asList(Keys.KEY_T_REPOSITORY_GTI_TOKEN_PRIMARY, Keys.KEY_T_REPOSITORY_GTI_TOKEN_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRepositoryGtiToken as(String alias) {
        return new TRepositoryGtiToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRepositoryGtiToken rename(String name) {
        return new TRepositoryGtiToken(name, null);
    }
}
